// Code generated by protoc-gen-go. DO NOT EDIT.
// source: defs.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	defs.proto

It has these top-level messages:
	Request
	Result
	Response
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Country  string `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
	Entity   string `protobuf:"bytes,3,opt,name=entity" json:"entity,omitempty"`
	Language string `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Query    string `protobuf:"bytes,5,opt,name=query" json:"query,omitempty"`
	Explicit bool   `protobuf:"varint,6,opt,name=explicit" json:"explicit,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Request) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Request) GetEntity() string {
	if m != nil {
		return m.Entity
	}
	return ""
}

func (m *Request) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Request) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *Request) GetExplicit() bool {
	if m != nil {
		return m.Explicit
	}
	return false
}

type Result struct {
	Id                string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ArtistUrl         string  `protobuf:"bytes,2,opt,name=artist_url,json=artistUrl" json:"artist_url,omitempty"`
	PreviewUrl        string  `protobuf:"bytes,3,opt,name=preview_url,json=previewUrl" json:"preview_url,omitempty"`
	ArtworkUrl        string  `protobuf:"bytes,4,opt,name=artwork_url,json=artworkUrl" json:"artwork_url,omitempty"`
	Streamable        bool    `protobuf:"varint,5,opt,name=streamable" json:"streamable,omitempty"`
	Currency          string  `protobuf:"bytes,6,opt,name=currency" json:"currency,omitempty"`
	CollectionName    string  `protobuf:"bytes,7,opt,name=collection_name,json=collectionName" json:"collection_name,omitempty"`
	CollectionPrice   float64 `protobuf:"fixed64,8,opt,name=collection_price,json=collectionPrice" json:"collection_price,omitempty"`
	Kind              string  `protobuf:"bytes,9,opt,name=kind" json:"kind,omitempty"`
	Genre             string  `protobuf:"bytes,10,opt,name=genre" json:"genre,omitempty"`
	Country           string  `protobuf:"bytes,11,opt,name=country" json:"country,omitempty"`
	TrackPrice        float64 `protobuf:"fixed64,12,opt,name=track_price,json=trackPrice" json:"track_price,omitempty"`
	ArtistName        string  `protobuf:"bytes,13,opt,name=artist_name,json=artistName" json:"artist_name,omitempty"`
	TrackId           uint64  `protobuf:"varint,14,opt,name=track_id,json=trackId" json:"track_id,omitempty"`
	TrackNumber       int32   `protobuf:"varint,15,opt,name=track_number,json=trackNumber" json:"track_number,omitempty"`
	TrackTimeMillis   float32 `protobuf:"fixed32,16,opt,name=track_time_millis,json=trackTimeMillis" json:"track_time_millis,omitempty"`
	TrackName         string  `protobuf:"bytes,17,opt,name=track_name,json=trackName" json:"track_name,omitempty"`
	TrackCensoredName string  `protobuf:"bytes,18,opt,name=track_censored_name,json=trackCensoredName" json:"track_censored_name,omitempty"`
	TrackViewUrl      string  `protobuf:"bytes,19,opt,name=track_view_url,json=trackViewUrl" json:"track_view_url,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Result) GetArtistUrl() string {
	if m != nil {
		return m.ArtistUrl
	}
	return ""
}

func (m *Result) GetPreviewUrl() string {
	if m != nil {
		return m.PreviewUrl
	}
	return ""
}

func (m *Result) GetArtworkUrl() string {
	if m != nil {
		return m.ArtworkUrl
	}
	return ""
}

func (m *Result) GetStreamable() bool {
	if m != nil {
		return m.Streamable
	}
	return false
}

func (m *Result) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Result) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *Result) GetCollectionPrice() float64 {
	if m != nil {
		return m.CollectionPrice
	}
	return 0
}

func (m *Result) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Result) GetGenre() string {
	if m != nil {
		return m.Genre
	}
	return ""
}

func (m *Result) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Result) GetTrackPrice() float64 {
	if m != nil {
		return m.TrackPrice
	}
	return 0
}

func (m *Result) GetArtistName() string {
	if m != nil {
		return m.ArtistName
	}
	return ""
}

func (m *Result) GetTrackId() uint64 {
	if m != nil {
		return m.TrackId
	}
	return 0
}

func (m *Result) GetTrackNumber() int32 {
	if m != nil {
		return m.TrackNumber
	}
	return 0
}

func (m *Result) GetTrackTimeMillis() float32 {
	if m != nil {
		return m.TrackTimeMillis
	}
	return 0
}

func (m *Result) GetTrackName() string {
	if m != nil {
		return m.TrackName
	}
	return ""
}

func (m *Result) GetTrackCensoredName() string {
	if m != nil {
		return m.TrackCensoredName
	}
	return ""
}

func (m *Result) GetTrackViewUrl() string {
	if m != nil {
		return m.TrackViewUrl
	}
	return ""
}

type Response struct {
	RequestId   string    `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	ResultCount uint64    `protobuf:"varint,2,opt,name=result_count,json=resultCount" json:"result_count,omitempty"`
	Results     []*Result `protobuf:"bytes,3,rep,name=results" json:"results,omitempty"`
	Err         string    `protobuf:"bytes,4,opt,name=err" json:"err,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *Response) GetResultCount() uint64 {
	if m != nil {
		return m.ResultCount
	}
	return 0
}

func (m *Response) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *Response) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "rpc.Request")
	proto.RegisterType((*Result)(nil), "rpc.Result")
	proto.RegisterType((*Response)(nil), "rpc.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Search service

type SearchClient interface {
	ITunesSearchNonStreaming(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ITunesSearchStreaming(ctx context.Context, opts ...grpc.CallOption) (Search_ITunesSearchStreamingClient, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) ITunesSearchNonStreaming(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/rpc.Search/iTunesSearchNonStreaming", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) ITunesSearchStreaming(ctx context.Context, opts ...grpc.CallOption) (Search_ITunesSearchStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Search_serviceDesc.Streams[0], c.cc, "/rpc.Search/iTunesSearchStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchITunesSearchStreamingClient{stream}
	return x, nil
}

type Search_ITunesSearchStreamingClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type searchITunesSearchStreamingClient struct {
	grpc.ClientStream
}

func (x *searchITunesSearchStreamingClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *searchITunesSearchStreamingClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Search service

type SearchServer interface {
	ITunesSearchNonStreaming(context.Context, *Request) (*Response, error)
	ITunesSearchStreaming(Search_ITunesSearchStreamingServer) error
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_ITunesSearchNonStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).ITunesSearchNonStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Search/ITunesSearchNonStreaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).ITunesSearchNonStreaming(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_ITunesSearchStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SearchServer).ITunesSearchStreaming(&searchITunesSearchStreamingServer{stream})
}

type Search_ITunesSearchStreamingServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type searchITunesSearchStreamingServer struct {
	grpc.ServerStream
}

func (x *searchITunesSearchStreamingServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *searchITunesSearchStreamingServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "iTunesSearchNonStreaming",
			Handler:    _Search_ITunesSearchNonStreaming_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "iTunesSearchStreaming",
			Handler:       _Search_ITunesSearchStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "defs.proto",
}

func init() { proto.RegisterFile("defs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x72, 0xd3, 0x30,
	0x10, 0xc6, 0x49, 0x9a, 0x9f, 0x4d, 0x9b, 0xb6, 0x2a, 0x05, 0xd1, 0x19, 0xa8, 0xc9, 0xc0, 0x60,
	0x38, 0x64, 0x98, 0x72, 0x82, 0x23, 0x3d, 0x71, 0xa0, 0xc3, 0xa8, 0x85, 0x6b, 0xc6, 0xb5, 0x97,
	0xa0, 0xa9, 0x2d, 0xbb, 0x92, 0x4c, 0xc9, 0x89, 0x13, 0x0f, 0xc1, 0x4b, 0xf2, 0x0c, 0x8c, 0x76,
	0x5d, 0x13, 0x86, 0x0b, 0xa7, 0xe8, 0xfb, 0xd1, 0xee, 0x97, 0xd5, 0x26, 0x00, 0x39, 0x7e, 0x76,
	0x8b, 0xda, 0x56, 0xbe, 0x12, 0x7d, 0x5b, 0x67, 0xf3, 0x9f, 0x11, 0x8c, 0x14, 0x5e, 0x37, 0xe8,
	0xbc, 0x98, 0x41, 0x4f, 0xe7, 0x32, 0x8a, 0xa3, 0x64, 0xa2, 0x7a, 0x3a, 0x17, 0x12, 0x46, 0x59,
	0xd5, 0x18, 0x6f, 0xd7, 0xb2, 0x47, 0xe4, 0x2d, 0x14, 0xf7, 0x60, 0x88, 0xc6, 0x6b, 0xbf, 0x96,
	0x7d, 0x12, 0x5a, 0x24, 0x8e, 0x60, 0x5c, 0xa4, 0x66, 0xd5, 0xa4, 0x2b, 0x94, 0x03, 0x52, 0x3a,
	0x2c, 0xee, 0xc2, 0xd6, 0x75, 0x83, 0x76, 0x2d, 0xb7, 0x48, 0x60, 0x10, 0x6e, 0xe0, 0xb7, 0xba,
	0xd0, 0x99, 0xf6, 0x72, 0x18, 0x47, 0xc9, 0x58, 0x75, 0x78, 0xfe, 0x6b, 0x00, 0x43, 0x85, 0xae,
	0x29, 0xfe, 0x8d, 0xf6, 0x10, 0x20, 0xb5, 0x5e, 0x3b, 0xbf, 0x6c, 0x6c, 0xd1, 0xa6, 0x9b, 0x30,
	0xf3, 0xd1, 0x16, 0xe2, 0x18, 0xa6, 0xb5, 0xc5, 0xaf, 0x1a, 0x6f, 0x48, 0xe7, 0x90, 0xd0, 0x52,
	0xad, 0x21, 0xb5, 0xfe, 0xa6, 0xb2, 0x57, 0x64, 0xe0, 0xac, 0xd0, 0x52, 0xc1, 0xf0, 0x08, 0xc0,
	0x79, 0x8b, 0x69, 0x99, 0x5e, 0x16, 0x48, 0x91, 0xc7, 0x6a, 0x83, 0x09, 0xb9, 0xb3, 0xc6, 0x5a,
	0x34, 0xd9, 0x9a, 0x72, 0x4f, 0x54, 0x87, 0xc5, 0x33, 0xd8, 0xcd, 0xaa, 0xa2, 0xc0, 0xcc, 0xeb,
	0xca, 0x2c, 0x4d, 0x5a, 0xa2, 0x1c, 0x91, 0x65, 0xf6, 0x87, 0x3e, 0x4b, 0x4b, 0x14, 0xcf, 0x61,
	0x6f, 0xc3, 0x58, 0x5b, 0x9d, 0xa1, 0x1c, 0xc7, 0x51, 0x12, 0xa9, 0x8d, 0x02, 0x1f, 0x02, 0x2d,
	0x04, 0x0c, 0xae, 0xb4, 0xc9, 0xe5, 0x84, 0x0a, 0xd1, 0x39, 0x4c, 0x74, 0x85, 0xc6, 0xa2, 0x04,
	0x9e, 0x28, 0x81, 0xcd, 0x57, 0x9b, 0xfe, 0xfd, 0x6a, 0xc7, 0x30, 0xf5, 0x36, 0xcd, 0xae, 0xda,
	0x4e, 0xdb, 0xd4, 0x09, 0x88, 0xe2, 0x26, 0x3c, 0x95, 0x30, 0x55, 0x0a, 0xbd, 0xd3, 0x4d, 0x45,
	0x3b, 0x4f, 0x81, 0x1f, 0xc0, 0x98, 0x2b, 0xe8, 0x5c, 0xce, 0xe2, 0x28, 0x19, 0xa8, 0x11, 0xe1,
	0x77, 0xb9, 0x78, 0x0c, 0xdb, 0x2c, 0x99, 0xa6, 0xbc, 0x44, 0x2b, 0x77, 0xe3, 0x28, 0xd9, 0x52,
	0xdc, 0xf0, 0x8c, 0x28, 0xf1, 0x02, 0xf6, 0xd9, 0xe2, 0x75, 0x89, 0xcb, 0x52, 0x17, 0x85, 0x76,
	0x72, 0x2f, 0x8e, 0x92, 0x9e, 0xda, 0x25, 0xe1, 0x42, 0x97, 0xf8, 0x9e, 0xe8, 0xf0, 0xc0, 0x6d,
	0xb9, 0x90, 0x64, 0x9f, 0x1f, 0x98, 0x8b, 0x85, 0x20, 0x0b, 0x38, 0x60, 0x39, 0x43, 0xe3, 0x2a,
	0x8b, 0x39, 0xfb, 0x04, 0xf9, 0xb8, 0xcb, 0x69, 0xab, 0x90, 0xff, 0x09, 0xcc, 0xd8, 0xdf, 0xed,
	0xc4, 0x01, 0x59, 0x39, 0xf3, 0x27, 0xde, 0x8a, 0xf9, 0x8f, 0x08, 0xc6, 0x0a, 0x5d, 0x5d, 0x19,
	0x87, 0x21, 0x81, 0xe5, 0x1f, 0xc6, 0xb2, 0x5b, 0xbd, 0x49, 0xcb, 0xf0, 0xf7, 0xb5, 0xb4, 0x9b,
	0x4b, 0x1a, 0x2f, 0xed, 0xe0, 0x40, 0x4d, 0x99, 0x3b, 0x0d, 0x94, 0x78, 0x0a, 0x23, 0x86, 0x4e,
	0xf6, 0xe3, 0x7e, 0x32, 0x3d, 0x99, 0x2e, 0x6c, 0x9d, 0x2d, 0x78, 0xa5, 0xd5, 0xad, 0x26, 0xf6,
	0xa0, 0x8f, 0xd6, 0xb6, 0x3b, 0x18, 0x8e, 0x27, 0xdf, 0x61, 0x78, 0x8e, 0xa9, 0xcd, 0xbe, 0x88,
	0xd7, 0x20, 0xf5, 0x45, 0x63, 0xd0, 0x31, 0x3e, 0xab, 0xcc, 0x39, 0xed, 0xa0, 0x36, 0x2b, 0xb1,
	0xdd, 0x56, 0xa3, 0x44, 0x47, 0x3b, 0xb7, 0xb5, 0x29, 0xfd, 0xfc, 0x8e, 0x78, 0x03, 0x87, 0x9b,
	0x57, 0xff, 0xf7, 0x5e, 0x12, 0xbd, 0x8c, 0xde, 0xde, 0x87, 0x43, 0x5d, 0x2d, 0x4a, 0xcc, 0x75,
	0xea, 0xe8, 0xf6, 0x82, 0x3f, 0x2e, 0x87, 0xf4, 0xd7, 0xf1, 0xea, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0x5b, 0xf1, 0x2f, 0x48, 0x04, 0x00, 0x00,
}
